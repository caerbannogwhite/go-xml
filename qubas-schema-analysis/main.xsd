<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
            xmlns:ct="tnsCommonTypes"
						xmlns:fourPL="tnsFourPL"
            xmlns:fivePL="tnsFivePL"
						xmlns:linear="tnsLinearModel"
            xmlns:quantal="tnsQuantalModel"
						elementFormDefault="unqualified">

  <xs:import namespace="tnsCommonTypes" schemaLocation="commonTypes.xsd"/>
  <xs:import namespace="tnsLinearModel" schemaLocation="linearModel.xsd"/>
	<xs:import namespace="tnsFourPL" schemaLocation="fourPL.xsd"/>
  <xs:import namespace="tnsFivePL" schemaLocation="fivePL.xsd"/>
  <xs:import namespace="tnsQuantalModel" schemaLocation="quantalModel.xsd"/>
  
	<xs:element name="QBAS">
    <xs:annotation><xs:appinfo><UI>
          <widget>div</widget>
    </UI></xs:appinfo></xs:annotation>
		<xs:complexType>
			<xs:sequence>
        <xs:element name="schemaVersion" type="xs:string" fixed="5"/>
        <xs:element name="QBASVersion" type="xs:string"/>
        <xs:element name="reportID" type="xs:string" />
        <xs:element name="DataFiles" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="rawdata">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ID" type="xs:string"/>
                    <xs:element name="data" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="metaData">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="auditTrail">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="methodID" type="xs:string"/>
                    <xs:element name="methodName" type="xs:string"/>
                    <xs:element name="serverID" type="xs:string"/>
                    <xs:element name="serverName" type="xs:string"/>
                    <xs:element name="runBy" type="xs:string"/>
                    <xs:element name="runOn" type="xs:string"/>
                    <xs:element name="originalFile" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="fileName" type="xs:string"/>
                          <xs:element name="dateOfCreation" type="xs:string"/>
                          <xs:element name="dateOfLastModification" type="xs:string"/>
                          <xs:element name="MD5" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="file" maxOccurs="unbounded">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="fileName" type="xs:string"/>
                          <xs:element name="importBy" type="xs:string"/>
                          <xs:element name="importOn" type="xs:string"/>
                          <xs:element name="importMd5" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="routineAnalysis" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="metaConfigurationFile" type="xs:string"/>
                          <xs:element name="RoutineSignOff" type="ct:signatureType" />
                          <xs:element name="AuditSignOff" type="ct:signatureType" minOccurs="0"/>  
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="file" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="custom" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="field" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="id" type="xs:string"/>
                                <xs:element name="name" type="xs:string"/>
                                <xs:element name="content" type="xs:string"/>
                                <xs:element name="type" type="xs:string"/>
                                <xs:element name="shownInReport" type="xs:boolean"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="systemMessages">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name ="message" minOccurs="0" maxOccurs="unbounded">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="content" type="xs:string"/>
                          <xs:element name="shownInReport" type="xs:boolean"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="ParsedData" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="sampleInformation">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="sample" maxOccurs="unbounded">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="id" type="xs:string"/>
                          <xs:element name="name">
                            <xs:simpleType>
                              <xs:restriction base="xs:string">
                                <xs:minLength value="1"/>
                              </xs:restriction>
                            </xs:simpleType>
                          </xs:element>
                          <xs:element name="type" type="ct:sampleType"/>
                          <xs:element name="preDilutionFactor" type="ct:strictlyPositiveDouble" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Plates" type="xs:int"/>
              <xs:element name="plate" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PlateId" type="xs:string"/>
                    <xs:element name="RowCount" type="xs:int"/>
                    <xs:element name="ColCount" type="xs:int"/>
                    <xs:element name="cell" maxOccurs="unbounded">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="value" type="xs:double" />
                          <xs:element name="maxValue" type="xs:double"/>
                          <xs:element name="dilution" type="xs:double" />
                          <xs:element name="dose" type="xs:double"/>
                          <xs:element name="unit" type="xs:string" />
                          <xs:element name="type" type="ct:sampleType" />
                          <xs:element name="sampleLine" type="xs:string" />
                          <xs:element name="replicate" type="xs:string" />
                          <xs:element name="excluded" type="xs:boolean"/>
                          <xs:element name="exclusionReason" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="userId" type="xs:string"/>
                                <xs:element name="reason" type="xs:string"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute name="colId" type="xs:string"/>
                        <xs:attribute name="rowId" type="xs:string"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
				<xs:element name="suitabilityCriteria" minOccurs="1">
          <xs:annotation><xs:appinfo><UI>
                <widget>div</widget>
          </UI></xs:appinfo></xs:annotation>
					<xs:complexType>
					<xs:sequence>
            <xs:element name="linearModel" type="linear:suitabilityCriteriaLinear" minOccurs="0">
              <xs:annotation><xs:appinfo><UI>
                      <widget>div</widget>
                      <condition><expression>Globals.statisticalModel()=="linearModel"</expression></condition>
                      <state>Quantitative</state>
                </UI></xs:appinfo></xs:annotation>
            </xs:element>
            <xs:element name="quantalModel" type="quantal:suitabilityCriteriaQuantal" minOccurs="0">
              <xs:annotation><xs:appinfo><UI>
                    <widget>div</widget>
                    <condition><expression>Globals.statisticalModel()=="logitModel" || Globals.statisticalModel()=="probitModel"</expression></condition>
              </UI></xs:appinfo></xs:annotation>
            </xs:element>
						<xs:element name="fourPL" type="fourPL:suitabilityCriteriaFourPL" minOccurs="0">
              <xs:annotation><xs:appinfo><UI>
                    <widget>div</widget>
                    <condition><expression>Globals.statisticalModel()=="fourPL"</expression></condition>
                    <state>Quantitative</state>
              </UI></xs:appinfo></xs:annotation>
            </xs:element>
            <xs:element name="fivePL" type="fivePL:suitabilityCriteriaFivePL" minOccurs="0">
              <xs:annotation><xs:appinfo><UI>
                    <widget>div</widget>
                    <condition><expression>Globals.statisticalModel()=="fivePL"</expression></condition>
                    <state>Quantitative</state>
              </UI></xs:appinfo></xs:annotation>
            </xs:element>
					</xs:sequence>
					</xs:complexType>
				</xs:element>
        <xs:element name="analysisDefinition" minOccurs="0" maxOccurs="1">
          <xs:annotation><xs:appinfo><UI>
                <widget>div</widget>
                <heading>Analysis Definition</heading>
                <sortid>0</sortid>
                <class>section</class>
          </UI></xs:appinfo></xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="name" type="ct:statisticalModel">
                <xs:annotation><xs:appinfo><UI>
                      <widget>dropdown</widget>
                      <label>Model</label>
                      <global>statisticalModel</global>
                      <defaultValue asString="false" parseAsString="true">ko.utils.isValidMethodType("Quantitative") ? "fourPL" : "logitModel"</defaultValue>
                </UI></xs:appinfo></xs:annotation>
              </xs:element>
              <xs:element name="version" type="xs:string"/>
              <xs:element name="priorDoseTransformation">
                <xs:annotation><xs:appinfo><UI>
                      <widget>dropdown</widget>
                      <label>@Html.LanguageString("DisplayName-AnalysisDef-priorDoseTransformation")</label>
                      <description>@Html.DescriptionString("Description-AnalysisDef-priorDoseTransformation")</description>
                </UI></xs:appinfo></xs:annotation>
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="none">
                      <xs:annotation><xs:appinfo><UI>
                            <label>@Html.LanguageString("DisplayName-AnalysisOpt-None")</label>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="log2">
                      <xs:annotation><xs:appinfo><UI>
                            <label>@Html.LanguageString("DisplayName-AnalysisOpt-Log2")</label>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="log">
                      <xs:annotation><xs:appinfo><UI>
                            <label>@Html.LanguageString("DisplayName-AnalysisOpt-Loge")</label>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="log10">
                      <xs:annotation><xs:appinfo><UI>
                            <label>@Html.LanguageString("DisplayName-AnalysisOpt-Log10")</label>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:enumeration>
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="combinedReport">
                <xs:annotation><xs:appinfo><UI>
                  <widget>div</widget>
                  <virtual>
                    <item name="usePrecisionUpperBound">
                      <sortid>3</sortid>
                      <widget>checkbox</widget>
                      <indent>true</indent>
                      <label>Filter samples by precision?</label>
                      <description>@Html.DescriptionString("Description-AnalysisDef-CombinedReport-precisionUpperBound")</description>
                      <condition>
                        <expression>$parent.is_used()</expression>
                      </condition>
                    </item>
                  </virtual>
                </UI></xs:appinfo></xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="isUsed" type="xs:boolean">
                      <xs:annotation><xs:appinfo><UI>
                            <widget>checkbox</widget>
                            <sortid>1</sortid>
                            <label>@Html.LanguageString("DisplayName-AnalysisDef-CombinedReport")</label>
                            <description>@Html.DescriptionString("Description-AnalysisDef-CombinedReport")</description>
                            <defaultValue asString="false">false</defaultValue>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:element>
                    <xs:element name="method">
                      <xs:annotation><xs:appinfo><UI>
                            <widget>dropdown</widget>
                            <sortid>2</sortid>
                            <indent>true</indent>
                            <label>@Html.LanguageString("DisplayName-AnalysisDef-CombinedReport"): Method</label>
                            <description>@Html.DescriptionString("Description-AnalysisDef-CombinedReport")</description>
                            <defaultValue>unweighted</defaultValue>
                            <condition>
                              <expression>$parent.is_used()</expression>
                              <writeDefault/>
                            </condition>
                      </UI></xs:appinfo></xs:annotation>
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="unweighted">
                            <xs:annotation><xs:appinfo><UI>
                                  <label>@Html.LanguageString("DisplayName-AnalysisOpt-Unweighted")</label>
                            </UI></xs:appinfo></xs:annotation>
                          </xs:enumeration>
                          <xs:enumeration value="weightedHomogeneous">
                            <xs:annotation><xs:appinfo><UI>
                                  <label>@Html.LanguageString("DisplayName-AnalysisOpt-WeightedHomogeneous")</label>
                            </UI></xs:appinfo></xs:annotation>
                          </xs:enumeration>
                          <xs:enumeration value="weightedHeterogeneous">
                            <xs:annotation><xs:appinfo><UI>
                                  <label>@Html.LanguageString("DisplayName-AnalysisOpt-WeightedHeterogeneous")</label>
                            </UI></xs:appinfo></xs:annotation>
                          </xs:enumeration>
                          <xs:enumeration value="heterogeneityTest">
                            <xs:annotation><xs:appinfo><UI>
                                  <label>@Html.LanguageString("DisplayName-AnalysisOpt-HeterogeneityTest")</label>
                            </UI></xs:appinfo></xs:annotation>
                          </xs:enumeration>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                    <xs:element name="precisionUpperBound" type="xs:double"  minOccurs="0">
                      <xs:annotation><xs:appinfo><UI>
                            <indent>true</indent>
                            <sortid>4</sortid>
                            <widget>textbox</widget>
                            <label>@Html.LanguageString("DisplayName-AnalysisDef-CombinedReport"): @Html.LanguageString("DisplayName-AnalysisDef-precisionUpperBound")</label>
                            <description>@Html.DescriptionString("Description-AnalysisDef-CombinedReport-precisionUpperBound")</description>
                            <defaultValue>2</defaultValue>
                            <validation>
                              <item>
                                <rule>greaterThanOne</rule>
                                <onlyif>$parent.parent().is_used()</onlyif>
                              </item>
                              <item>
                                <rule>required</rule>
                                <onlyif>$parent.parent().is_used()</onlyif>
                              </item>
                            </validation>
                            <condition>
                              <expression>$parent.is_used() &amp;&amp; $parent.nodes.get("usePrecisionUpperBound").value()</expression>
                              <onParse>$parent.nodes.get("usePrecisionUpperBound").value(present)</onParse>
                            </condition>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:element>
                    <xs:element name="criticalPValue" minOccurs="0">
                      <xs:annotation><xs:appinfo><UI>
                            <indent>true</indent>
                            <sortid>5</sortid>
                            <widget>textbox</widget>
                            <label>@Html.LanguageString("DisplayName-AnalysisDef-CombinedReport"): @Html.LanguageString("DisplayName-AnalysisDef-heterogeneityCriticalPValue")</label>
                            <description>@Html.DescriptionString("Description-AnalysisDef-CombinedReport")</description>
                            <defaultValue>0.1</defaultValue>
                            <validation><item>
                              <rule>significanceLevel</rule>
                              <onlyif>$parent.parent().is_used() &amp;&amp; $parent.nodes.get("method").value()=="heterogeneityTest"</onlyif>
                            </item>
                            <item>
                              <rule>required</rule>
                              <onlyif>$parent.parent().is_used() &amp;&amp; $parent.nodes.get("method").value()=="heterogeneityTest"</onlyif>
                            </item></validation>
                            <condition>
                              <expression>$parent.is_used() &amp;&amp; $parent.nodes.get("method").value()=="heterogeneityTest"</expression>
                              <writeDefault/>
                            </condition>
                      </UI></xs:appinfo></xs:annotation>
                      <xs:simpleType>
                        <xs:restriction base="xs:double">
                          <xs:minInclusive value="0"/>
                          <xs:maxInclusive value="0.5"/>
                        </xs:restriction>
                      </xs:simpleType> 
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="preProcessing">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="plateDifference" minOccurs="0">
                      <!-- compute plateA - plateB -->
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="plateA" type="xs:string"/>
                          <xs:element name="plateB" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="analysisOptions">
                <xs:annotation><xs:appinfo><UI>
                      <widget>div</widget>
                </UI></xs:appinfo></xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="linearModel" type="linear:analysisOptionsLinear" minOccurs="0" >
                      <xs:annotation><xs:appinfo><UI>
                            <widget>div</widget>
                            <condition><expression>Globals.statisticalModel()=="linearModel"</expression></condition>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:element>
                    <xs:element name="quantalModel" type="quantal:analysisOptionsQuantal" minOccurs="0" >
                      <xs:annotation><xs:appinfo><UI>
                            <widget>div</widget>
                            <condition><expression>Globals.statisticalModel()=="logitModel" || Globals.statisticalModel()=="probitModel"</expression></condition>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:element>
                    <xs:element name="fourPL" type="fourPL:analysisOptionsFourPL" minOccurs="0" >
                      <xs:annotation><xs:appinfo><UI>
                            <widget>div</widget>
                            <condition><expression>Globals.statisticalModel()=="fourPL"</expression></condition>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:element>
                    <xs:element name="fivePL" type="fivePL:analysisOptionsFivePL" minOccurs="0" >
                      <xs:annotation><xs:appinfo><UI>
                            <widget>div</widget>
                            <condition><expression>Globals.statisticalModel()=="fivePL"</expression></condition>
                      </UI></xs:appinfo></xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="results" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="linearModel" type="linear:resultsLinear" minOccurs="0"/>
              <xs:element name="quantalModel" type="quantal:resultsQuantal" minOccurs="0"/>
              <xs:element name="fourPL" type="fourPL:resultsFourPL" minOccurs="0"/>
              <xs:element name="fivePL" type="fivePL:resultsFivePL" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="validationLog" minOccurs="0">
          <xs:complexType>
            <xs:sequence>

              <xs:element name="DSCPMode" type="xs:boolean" maxOccurs="1"/>
              <xs:element name="stage" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="name" type="xs:string"/>
                    <xs:element name="category">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="installationValidation"/>
                          <xs:enumeration value="nonDSCPPProcesses"/>
                          <xs:enumeration value="DSCPPProcesses"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                    <xs:element name="status">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="pass"/>
                          <xs:enumeration value="fail"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                    <xs:element name="reasonForFailure" type="xs:string" minOccurs="0"/>
                    <xs:element name="logDate" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="changeLog" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Change" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="UserID" type="xs:string"/>
                    <xs:element name="ChangeDate" type="xs:string"/>
                    <xs:element name="Update" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
